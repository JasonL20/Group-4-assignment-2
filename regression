import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

price_demand = pd.read_csv("price_demand_data.csv")
weather = pd.read_csv('weather_data.csv')

price_demand.tail()

weather.tail()

price_demand['Date'] = price_demand['SETTLEMENTDATE'].apply(lambda x: x.split()[0])  #split date and add Date column
price_demand.head(50)

data = price_demand.merge(weather, left_on = 'Date', right_on = 'Date')  #merge two data frame

data1 = data.drop(['REGION', 'SETTLEMENTDATE'], axis = 'columns' )  
#drop the column not relevant.(all data are in VIC, no need for this column, settlementdate can refer to Date column. name new df data1

data1['Month']= data1['Date'].apply(lambda x:x.split('/')[1])  # create Month column 




#groupby data by date and the feature that we might use 
data2 = data1.groupby(['Date'], as_index = False).agg({'TOTALDEMAND':'max', 'Minimum temperature (°C)':'mean','Maximum temperature (°C)':'mean'
                                  , 'Rainfall (mm)':'mean', 'Evaporation (mm)':'mean', 'Sunshine (hours)': 'mean', 'Speed of maximum wind gust (km/h)':'mean'
                                  , '9am Temperature (°C)':'mean', '9am relative humidity (%)':'mean', '9am cloud amount (oktas)':'mean'})
                                  
data2.head(10)                                  
                 
                                  


###check the correlation of features


FEATURES = ['Minimum temperature (°C)', 'TOTALDEMAND']
data2[FEATURES].corr(method='pearson')
# moderate correlation



# function to find the correlation between choosen feature and maximum demand 
def corr(feature):
    FEATURES = [feature, 'TOTALDEMAND']
    return data2[FEATURES].corr(method='pearson')
    

for column in data1.columns:
    print(corr(column))
# run a loop to find correlation between TOTALDEMAND and other features


# function to plot the scatter graph between choosen feature and max demand
def scatt(feature):
    x = data2[feature]
    y = data2['TOTALDEMAND']
    plt.scatter(x, y)
    return plt.show()
    
corr('Sunshine (hours)')    # low correlation

corr('Speed of maximum wind gust (km/h)')   #low correlatoin

corr('Speed of maximum wind gust (km/h)')   # low correlation


corr('9am Temperature (°C)')   #moderate correlation

corr('9am relative humidity (%)')  #low correlation



#top feature

#Minimum temperature (°C),
#9am Temperature (°C),
#Maximum temperature (°C),
#Evaporation
#9am cloud amount (oktas)

#top 3 are all temperature which are highly correlated, therefore we use minimum temperature only which has the highest correlation to maximum demand
FEATURES = ['Minimum temperature (°C)', '9am Temperature (°C)', '9am cloud amount (oktas)']
data2[FEATURES].corr(method='pearson')


from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.model_selection import train_test_split


data2 = data2.dropna()  # drop the rows with blank and string


# pick top 3 features
X = data2[['Minimum temperature (°C)', 'Evaporation (mm)', '9am cloud amount (oktas)']]
y = data2[['TOTALDEMAND']]

# split it so that we have 80% data for training (finding the coefficients of our model)
# and 20% for evaluating the model using MSE
X_train, X_test, y_train, y_test = train_test_split(X.values, y.values, test_size=0.2, random_state=12)

# build linear regression model
lm = LinearRegression().fit(X_train, y_train)
y_pred = lm.predict(X_test)


#check output
y_test[:5], y_pred[:5]


#check MSE and R2
MSE = mean_squared_error(y_test, y_pred)
R2 = lm.score(X_test, y_test)
MSE, R2
#MSE is big and R2 is small

# try another model with top 2 features
X = data2[['Minimum temperature (°C)', 'Evaporation (mm)']]
y = data2[['TOTALDEMAND']]
X_train, X_test, y_train, y_test = train_test_split(X.values, y.values, test_size=0.2, random_state=12)
lm = LinearRegression().fit(X_train, y_train)
y_pred = lm.predict(X_test)
MSE = mean_squared_error(y_test, y_pred)
R2 = lm.score(X_test, y_test)
MSE, R2

# R2 even smaller, and MSE even bigger, worse than the first one

# try use temp only
X = data2[['Minimum temperature (°C)']]
y = data2[['TOTALDEMAND']]
X_train, X_test, y_train, y_test = train_test_split(X.values, y.values, test_size=0.2, random_state=12)
lm = LinearRegression().fit(X_train, y_train)
y_pred = lm.predict(X_test)
MSE = mean_squared_error(y_test, y_pred)
R2 = lm.score(X_test, y_test)
MSE, R2

# outcome is worse, use the the first model which is the best so far, although it is not good enough

